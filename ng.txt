<------------------------------------------------------------------------------------------->
(1) Introduction
<------------------------------------------------------------------------------------------->

Angular is js framework to build Single-Page-Application
Angular version: AngularJS(V1), after V2 all are same, V3 skipped.
Install Angular: sudo npm install -g @angular/cli
Create project: ng new project_name
Run project: ng serve -o
Add Bootstrap: npm install --save bootstrap@3 and add style to angular.json


<------------------------------------------------------------------------------------------->
(2) The Basics
<------------------------------------------------------------------------------------------->

@Component = decorator ,It has selector,template or templateUrl (necessary),styles,styleUrls
bootstrap = load in index.html, other components in declaration, other modules in imports
string interpolation {{}} in between any expression returning string
property binding [property]="variable"
event binding (event)="func($event)"
two way binding [(ngModle)]="variable"

<p *ngIf="true; else localRef"></p>
<ng-template #localRef></ng-template>
local ref is only used in html, but we can pass to function.

<p *ngFor="let item of array;let i= index">

<p [ngStyle]="{backgroundColor:'red'}">
<p [ngClass]="{className:expresion}"

debugging = webpack/./src

<------------------------------------------------------------------------------------------->
(3) Components & Databinding
<------------------------------------------------------------------------------------------->

Custom Property binding:
parent: <p [prop]="var"></p>
child: @Input('prop') var2;

Custom Event binding:
parent: <p (customE)="doSomething($event)"></p>
child:
@Output('customE') customEvnt = new EventEmitter<type>() 
onClick(){
  cursomEvnt.emit(data);
}

View Encapsulation:
@Component({encapsulation:ViewEncapsulation.Emulated})
now style of this component will apply to global.

ViewChild:
<p #localRef></p>
@ViewChild('localRef') var;  // this var type is ElementRef,set After ngAfterViewInit,not ngInit

ContentChild:
parent: <app-child>...<p #localRef></p>...</app-child>   // we can use this localref in both component.
child: <>...<ng-content></ng-content>...</>
child ts: @ContentChild('localRef') var;     // this will be set after ngAfterContentInit

NgContent:
parent: <app-component>somehtml</app-component>
child: <>...<ng-content></ng-content>...</>

LifeCycle:
ngOnChanges,ngOnInit,ngDoCheck,ngOnDestroy
ngAfterContentInit,ngAfterContentChecked,ngAfterViewInit,ngAfterViewChecked


<------------------------------------------------------------------------------------------->
(4) Directives
<------------------------------------------------------------------------------------------->

attribute directive vs structural directive
* structural directive,it ch the dom
can not use two structural directive on one element.

<p [ngSwith]='value'>
 <p *ngSwitchCase="1">One</p>
 <p *ngSwitchCase="2">Two</p>
 <p *ngSwitchCase="3">Three</p>
</p>

custom directive:
@Directive({selector:'[drname]'});
constructor(private el:ElementRef){}
ngOnInit(){el.nativeElement.style.backgroundColor='red'}

better aproach:
constructor(private el:ElementRef,private r:Renderer2){}
ngOnInit(){renderer.setStyle(el.nativeElement,'background-color','red'}

using hostlistner&hostbinding:
@HostBinding('style.backgroundColor') var;
@HostListner('mouseenter') fun1(){ var='blue' }
@HostListner('mouseleave') fun2(){ var='transparent' }

<p *ngIf="var"></p>   // is same as
<ng-template [ngIf]="var"></ng-template>

//todo: video 101

<------------------------------------------------------------------------------------------->
(5) Services & DI
<------------------------------------------------------------------------------------------->


command: ng g s service_name

Basic Service:
@Injectable({providedIn:root})
export class MyService{
  logMethod(){}
}
use in component:
constructor(private mySerVar:MyService){}
this.mySerVar.logMethod();

In above example => creates only one instance of service and provides to all component.
@Component({providers:[MyService]})  => only for this and it's child components.
@NgModule({providers:[MyService]})  => all component of this module

we can create event emitter variable in service and emit from component and subscribe to event emitter anywhere

<------------------------------------------------------------------------------------------->
(6) Routing
<------------------------------------------------------------------------------------------->

in ng module
const appRoutes:Routes = [
  { path:'',component:Homepage },
  { path:'users',component:UserComponent },
  { path:'/404',component:404Component },
  { path:'**',redirectTo:'/404' }
]
imports:[RouterModule.forRoot(appRoutes)]

in app comp =>  <router-outlet></router-outlet>
in links => <a routerLink="/">Home</a> or [routerLink]="['/users','id']"
routerLinkActive="className" 
[routerLinkActiveOption]="{exact:true}"
[queryParams]="{allowEdit:'1'}"
fragment="loading"

programatically navigate:
=>we can add Router,ActivatedRoute to constructor
router.navigate(['servers'],{relativeTo:activeRoute,
    queryParams:{allowEdit:'1'},fragment:'loading',queryParamsHandling:'preserve'})

{path:'/user/:id',component:any}
get params: activeRoute.snapshot.params["id"];
get queryParams: activeRoute.snapshot.queryParams;
get fragment: activeRoute.snapshot.fragment;
or : activeRoute.params.subscribe((newPara)=>dothing(newPara))



<------------------------------------------------------------------------------------------->
(7) Observables
<------------------------------------------------------------------------------------------->


<------------------------------------------------------------------------------------------->
(8) Forms
<------------------------------------------------------------------------------------------->


<------------------------------------------------------------------------------------------->
(9) Pipes
<------------------------------------------------------------------------------------------->


<------------------------------------------------------------------------------------------->
(10) Http
<------------------------------------------------------------------------------------------->


<------------------------------------------------------------------------------------------->
(11) Authentication
<------------------------------------------------------------------------------------------->


<------------------------------------------------------------------------------------------->
(12) Optimization & ngModules
<------------------------------------------------------------------------------------------->


<------------------------------------------------------------------------------------------->
(13) Deployment
<------------------------------------------------------------------------------------------->


<------------------------------------------------------------------------------------------->
(14) Animation & Testing
<------------------------------------------------------------------------------------------->

